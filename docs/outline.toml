extension = ".md"

[pages]

[pages.triggers]
title = "Triggers"
module = "prefectlegacy.triggers"
functions = [
    "all_finished",
    "manual_only",
    "all_successful",
    "all_failed",
    "any_successful",
    "any_failed",
    "not_all_skipped",
    "some_failed",
    "some_successful",
]

[pages.backend.artifacts]
title = "Artifacts"
module = "prefectlegacy.backend.artifacts"
functions = [
    "create_link_artifact",
    "update_link_artifact",
    "create_markdown_artifact",
    "update_markdown_artifact",
    "delete_artifact"
]

[pages.backend.flow]
title = "Flow"
module = "prefectlegacy.backend.flow"
classes = ["FlowView"]

[pages.backend.flow_run]
title = "Flow Run"
module = "prefectlegacy.backend.flow_run"
classes = ["FlowRunView"]
functions = ["watch_flow_run"]

[pages.backend.task_run]
title = "Task Run"
module = "prefectlegacy.backend.task_run"
classes = ["TaskRunView"]

[pages.backend.tenant]
title = "Tenant"
module = "prefectlegacy.backend.tenant"
classes = ["TenantView"]

[pages.backend.kv_store]
title = "KV Store"
module = "prefectlegacy.backend.kv_store"
functions = ["set_key_value", "get_key_value", "delete_key", "list_keys"]

[pages.client.client]
title = "Client"
module = "prefectlegacy.client"
classes = ["Client"]

[pages.client.secrets]
title = "Secrets"
module = "prefectlegacy.client.secrets"
classes = ["Secret"]

[pages.cli.agent]
title = "agent"
module = "prefectlegacy.cli.agent"
commands = ["local", "docker", "kubernetes", "ecs"]

[pages.cli.auth]
title = "auth"
module = "prefectlegacy.cli.auth"
commands = ["login", "logout", "list_tenants", "switch_tenants", "create_key", "list_keys", "revoke_key", "status"]

[pages.cli.create]
title = "create"
module = "prefectlegacy.cli.create"
commands = ["project"]

[pages.cli.delete]
title = "delete"
module = "prefectlegacy.cli.delete"
commands = ["project"]

[pages.cli.describe]
title = "describe"
module = "prefectlegacy.cli.describe"
commands = ["flows", "tasks", "flow_runs"]

[pages.cli.get]
title = "get"
module = "prefectlegacy.cli.get"
commands = ["flows", "tasks", "projects", "flow_runs", "logs"]

[pages.cli.register]
title = "register"
module = "prefectlegacy.cli.build_register"
commands = ["register"]

[pages.cli.build]
title = "build"
module = "prefectlegacy.cli.build_register"
commands = ["build"]

[pages.cli.kv_store]
title = "kv_store"
module = "prefectlegacy.cli.kv_store"
commands = ["set_command", "get_command", "delete_command", "list_command"]

[pages.cli.run]
title = "run"
module = "prefectlegacy.cli.run"
commands = ["run"]

[pages.cli.server]
title = "server"
module = "prefectlegacy.cli.server"
commands = ["start", "create_tenant", "stop", "config_cmd"]

[pages.schedules.schedules]
title = "Schedules"
module = "prefectlegacy.schedules.schedules"
classes = [
    "Schedule",
]
functions = [
    "IntervalSchedule",
    "CronSchedule",
    "RRuleSchedule",
]

[pages.schedules.clocks]
title = "Clocks"
module = "prefectlegacy.schedules.clocks"
classes = [
    "Clock",
    "IntervalClock",
    "CronClock",
    "DatesClock",
    "RRuleClock",
]

[pages.schedules.filters]
title = "Filters"
module = "prefectlegacy.schedules.filters"
functions = [
    "at_time",
    "between_datetimes",
    "between_dates",
    "between_times",
    "is_weekday",
    "is_weekend",
    "is_day_of_week",
    "is_month_end",
    "is_month_start"
]

[pages.schedules.adjustments]
title = "Adjustments"
module = "prefectlegacy.schedules.adjustments"
functions = [
    "add",
    "next_weekday",
]

[pages.core.edge]
title = "Edge"
module = "prefectlegacy.core.edge"
classes = ["Edge"]

[pages.core.flow]
title = "Flow"
module = "prefectlegacy.core.flow"
classes = ["Flow"]

[pages.core.task]
title = "Task"
module = "prefectlegacy.core.task"
classes = ["Task"]

[pages.core.parameters]
title = "Parameter"
module = "prefectlegacy.core.parameter"
classes = ["Parameter", "DateTimeParameter"]

[pages.engine.cache_validators]
title = "Cache Validators"
module = "prefectlegacy.engine.cache_validators"
functions = ["never_use", "duration_only", "all_inputs", "all_parameters", "partial_parameters_only", "partial_inputs_only"]

[pages.engine.state]
title = "State"
module = "prefectlegacy.engine.state"
classes = [
            "State",
            "Pending",
            "Paused",
            "Scheduled",
            "Resume",
            "Retrying",
            "Submitted",
            "Queued",
            "ClientFailed",
            "Running",
            "Cancelling",
            "Finished",
            "Success",
            "Cached",
            "Looped",
            "Mapped",
            "Skipped",
            "Failed",
            "Cancelled",
            "TriggerFailed",
            "ValidationFailed",
            "TimedOut",
        ]

[pages.engine.signals]
module = "prefectlegacy.engine.signals"
title = "Signals"
classes = [
            "ENDRUN",
            "FAIL",
            "LOOP",
            "TRIGGERFAIL",
            "VALIDATIONFAIL",
            "SUCCESS",
            "RETRY",
            "SKIP",
            "PAUSE",
        ]

[pages.engine.flow_runner]
title = "FlowRunner"
module = "prefectlegacy.engine.flow_runner"
classes = ["FlowRunner"]

[pages.engine.task_runner]
title = "TaskRunner"
module = "prefectlegacy.engine.task_runner"
classes = ["TaskRunner"]

[pages.engine.result]
title = "Results"
module = "prefectlegacy.engine.result"
classes = ["Result"]

[pages.engine.results]
title = "Result Subclasses"
module = "prefectlegacy.engine.results"
classes = ["PrefectResult", "GCSResult", "LocalResult", "S3Result", "AzureResult", "SecretResult", "ConstantResult"]

[pages.engine.serializers]
title = "Result Serializers"
module = "prefectlegacy.engine.serializers"
classes = ["Serializer", "PickleSerializer", "JSONSerializer", "DateTimeSerializer", "PandasSerializer", "CompressedSerializer"]

[pages.engine.cloud]
title = "Cloud"
module = "prefectlegacy.engine.cloud"
classes = ["CloudFlowRunner", "CloudTaskRunner"]

[pages.executors]
title = "Executors"
module = "prefectlegacy.executors"
classes = {Executor=[], LocalExecutor=[], LocalDaskExecutor=[], DaskExecutor=[]}

[pages.run_configs]
title = "Run Configuration"
module = "prefectlegacy.run_configs"
classes = ["RunConfig", "UniversalRun", "LocalRun", "DockerRun", "KubernetesRun", "ECSRun", "VertexRun"]

[pages.storage]
title = "Storage"
module = "prefectlegacy.storage"
classes = {"Storage" = ["add_flow", "build"], "Azure" = [], "Bitbucket" = [], "CodeCommit" = [], "Docker" = [], "GCS" = [], "Git" = [], "GitHub" = [], "GitLab" = [], "Local" = [], "Module" = [], "S3" = [], "Webhook" = []}

[pages.exceptions]
title = "Exceptions"
module = "prefectlegacy.exceptions"
classes = [
    "PrefectSignal", 
    "VersionLockMismatchSignal", 
    "TaskTimeoutSignal",
    "PrefectException",
    "ClientError",
    "AuthorizationError",
    "FlowStorageError"
]

[pages.tasks.control_flow]
title = "Control Flow Tasks"
module = "prefectlegacy.tasks.control_flow"
classes = ["FilterTask", "case"]
functions = ["switch", "ifelse", "merge"]

[pages.tasks.airtable]
title = "Airtable Tasks"
module = "prefectlegacy.tasks.airtable"
classes = ["WriteAirtableRow", "ReadAirtableRow"]

[pages.tasks.aws]
title = "AWS Tasks"
module = "prefectlegacy.tasks.aws"
classes = ["S3Download", "S3Upload", "S3List", "LambdaCreate", "LambdaDelete" , "LambdaInvoke", "LambdaList", "StepActivate", "AWSSecretsManager", "AWSParametersManager", "BatchSubmit", "AWSClientWait"]

[pages.tasks.azure]
title = "Azure Tasks"
module = "prefectlegacy.tasks.azure"
classes = ["BlobStorageDownload",
           "BlobStorageUpload",
           "CosmosDBCreateItem",
           "CosmosDBReadItems",
           "CosmosDBQueryItems",
           "DatafactoryCreate",
           "PipelineCreate",
           "PipelineRun"]

[pages.tasks.azureml]
title = "Azure ML Service Tasks"
module = "prefectlegacy.tasks.azureml"
classes = ["DatasetCreateFromDelimitedFiles",
           "DatasetCreateFromParquetFiles",
           "DatasetCreateFromFiles",
           "DatastoreRegisterBlobContainer",
           "DatastoreList",
           "DatastoreGet",
           "DatastoreUpload"]

[pages.tasks.fivetran]
title = "Fivetran Tasks"
module = "prefectlegacy.tasks.fivetran"
classes = ["FivetranSyncTask"]
verified_task = true

[pages.tasks.prefect]
title = "Prefect Tasks"
module = "prefectlegacy.tasks.prefect"
classes = [
    "StartFlowRun",
    "RenameFlowRun",
    "CancelFlowRun",
    "create_flow_run",
    "get_task_run_result",
    "wait_for_flow_run"
    ]

[pages.tasks.github]
title = "GitHub Tasks"
module = "prefectlegacy.tasks.github"
classes = ["CreateGitHubPR", "OpenGitHubIssue", "CreateIssueComment", "GetRepoInfo", "CreateBranch"]

[pages.tasks.kubernetes]
title = "Kubernetes Tasks"
module = "prefectlegacy.tasks.kubernetes"
classes = [
        "CreateNamespacedDeployment",
        "DeleteNamespacedDeployment",
        "ListNamespacedDeployment",
        "PatchNamespacedDeployment",
        "ReadNamespacedDeployment",
        "ReplaceNamespacedDeployment",
        "CreateNamespacedJob",
        "DeleteNamespacedJob",
        "ListNamespacedJob",
        "PatchNamespacedJob",
        "ReadNamespacedJob",
        "ReplaceNamespacedJob",
        "RunNamespacedJob",
        "ConnectGetNamespacedPodExec",
        "CreateNamespacedPod",
        "DeleteNamespacedPod",
        "ListNamespacedPod",
        "PatchNamespacedPod",
        "ReadNamespacedPod",
        "ReadNamespacedPodLogs",
        "ReplaceNamespacedPod",
        "CreateNamespacedService",
        "DeleteNamespacedService",
        "ListNamespacedService",
        "PatchNamespacedService",
        "ReadNamespacedService",
        "ReplaceNamespacedService",
        "KubernetesSecret",
        ]

[pages.tasks.dbt]
title = "DBT Tasks"
module = "prefectlegacy.tasks.dbt"
classes = [
        "DbtShellTask",
        "DbtCloudRunJob"
        ]
verified_task = true

[pages.tasks.asana]
title = "Asana Tasks"
module = "prefectlegacy.tasks.asana"
classes = ["OpenAsanaToDo"]

[pages.tasks.docker]
title = "Docker Tasks"
module = "prefectlegacy.tasks.docker"
classes = [
        "BuildImage",
        "ListImages",
        "PullImage",
        "PushImage",
        "RemoveImage",
        "TagImage",
        "CreateContainer",
        "GetContainerLogs",
        "ListContainers",
        "StartContainer",
        "StopContainer",
        "RemoveContainer",
        "WaitOnContainer"
        ]

[pages.tasks.dropbox]
title = "Dropbox Tasks"
module = "prefectlegacy.tasks.dropbox"
classes = ["DropboxDownload"]

[pages.tasks.exasol]
title = "Exasol Tasks"
module = "prefectlegacy.tasks.exasol"
classes = [
        "ExasolFetch",
        "ExasolExecute",
        "ExasolImportFromIterable",
        "ExasolExportToFile"
        ]

[pages.tasks.files]
title = "File and Filesystem Tasks"
module = "prefectlegacy.tasks.files"
classes = [
        "Copy",
        "Glob",
        "Move",
        "Remove",
        "Unzip",
        "Zip",
        ]

[pages.tasks.firebolt]
title = "Firebolt Tasks"
module = "prefectlegacy.tasks.firebolt"
classes = ["FireboltQuery"]

[pages.tasks.gcp]
title = "Google Cloud Tasks"
module = "prefectlegacy.tasks.gcp"
classes = [
        "GCPSecret",
        "GCSDownload",
        "GCSUpload",
        "GCSCopy",
        "GCSBlobExists",
        "BigQueryTask",
        "BigQueryStreamingInsert",
        "CreateBigQueryTable",
        "BigQueryLoadGoogleCloudStorage",
        "BigQueryLoadFile"
        ]
verified_task = true

[pages.tasks.great_expectations]
title = "Great Expectations Task"
module = "prefectlegacy.tasks.great_expectations"
classes = ["RunGreatExpectationsValidation"]
verified_task = true

[pages.tasks.gsheets]
title = "Google Sheets Tasks"
module = "prefectlegacy.tasks.gsheets"
classes = [
        "WriteGsheetRow",
        "ReadGsheetRow",
        ]

[pages.tasks.jira]
title = "Jira Tasks"
module = "prefectlegacy.tasks.jira"
classes = ["JiraTask", "JiraServiceDeskTask"]

[pages.tasks.jupyter]
title = "Jupyter Tasks"
module = "prefectlegacy.tasks.jupyter"
classes = ["ExecuteNotebook"]

[pages.tasks.kafka]
title = "Kafka Tasks"
module = "prefectlegacy.tasks.kafka"
classes = [
        "KafkaBatchConsume",
        "KafkaBatchProduce"
]

[pages.tasks.monday]
title = "Monday Tasks"
module = "prefectlegacy.tasks.monday"
classes = ["CreateItem"]

[pages.tasks.trello]
title = "Trello Tasks"
module = "prefectlegacy.tasks.trello"
classes = ["CreateCard"]

[pages.tasks.mysql]
title = "MySQL Tasks"
module = "prefectlegacy.tasks.mysql"
classes = ["MySQLExecute", "MySQLFetch"]

[pages.tasks.notifications]
title = "Notification Tasks"
module = "prefectlegacy.tasks.notifications"
classes = ["EmailTask", "SlackTask", "PushbulletTask"]

[pages.tasks.postgres]
title = "Postgres Tasks"
module = "prefectlegacy.tasks.postgres"
classes = ["PostgresExecute", "PostgresExecuteMany", "PostgresFetch"]

[pages.tasks.prometheus]
title = "prometheus Tasks"
module = "prefectlegacy.tasks.prometheus"
classes = ["PushGaugeToGateway", "PushAddGaugeToGateway"]

[pages.tasks.sql_server]
title = "SQL Server Tasks"
module = "prefectlegacy.tasks.sql_server"
classes = ["SqlServerExecute", "SqlServerExecuteMany", "SqlServerFetch"]

[pages.tasks.redis]
title = "Redis Tasks"
module = "prefectlegacy.tasks.redis"
classes = ["RedisSet", "RedisGet", "RedisExecute"]

[pages.tasks.rss]
title = "RSS Tasks"
module = "prefectlegacy.tasks.rss"
classes = ["ParseRSSFeed"]

[pages.tasks.secrets]
title = "Secret Tasks"
module = "prefectlegacy.tasks.secrets"
classes = ["SecretBase", "PrefectSecret", "EnvVarSecret"]

[pages.tasks.snowflake]
title = "Snowflake Tasks"
module = "prefectlegacy.tasks.snowflake"
classes = ["SnowflakeQuery", "SnowflakeQueriesFromFile"]
verified_task = true

[pages.tasks.sodasql]
title = "SodaSQL Tasks"
module = "prefectlegacy.tasks.sodasql"
classes = ["SodaSQLScan"]

[pages.tasks.sodaspark]
title = "SodaSpark Tasks"
module = "prefectlegacy.tasks.sodaspark"
classes = ["SodaSparkScan"]

[pages.tasks.mixpanel]
title = "Mixpanel Tasks"
module = "prefectlegacy.tasks.mixpanel"
classes = ["MixpanelExportTask"]

[pages.tasks.databricks]
title = "Databricks Tasks"
module = "prefectlegacy.tasks.databricks"
classes = ["DatabricksSubmitRun", "DatabricksRunNow", "DatabricksSubmitMultitaskRun", "DatabricksGetJobID"]
verified_task = true

[pages.tasks.spacy]
title = "spaCy Tasks"
module = "prefectlegacy.tasks.spacy"
classes = ["SpacyNLP", "SpacyTagger", "SpacyParser", "SpacyNER", "SpacyComponent"]

[pages.tasks.sqlite]
title = "SQLite Tasks"
module = "prefectlegacy.tasks.database"
classes = ["SQLiteQuery", "SQLiteScript"]
verified_task = true

[pages.tasks.function]
title = "Function Tasks"
module = "prefectlegacy.tasks.core.function"
classes = ["FunctionTask"]

[pages.tasks.collections]
title = "Collection Tasks"
module = "prefectlegacy.tasks.core.collections"
classes = ["List", "Tuple", "Set", "Dict"]

[pages.tasks.operators]
title = "Operator Tasks"
module = "prefectlegacy.tasks.core.operators"
classes = [
    "GetItem",
    "GetAttr",
    "Add",
    "Sub",
    "Mul",
    "Div",
    "FloorDiv",
    "Pow",
    "Mod",
    "And",
    "Or",
    "Not",
    "Equal",
    "NotEqual",
    "GreaterThanOrEqual",
    "GreaterThan",
    "LessThanOrEqual",
    "LessThan"
    ]
[pages.tasks.constants]
title = "Constant Tasks"
module = "prefectlegacy.tasks.core.constants"
classes = ["Constant"]

[pages.tasks.resources]
title = "ResourceManager Tasks"
module = "prefectlegacy.tasks.core.resource_manager"
classes = ["ResourceManager"]
functions = ["resource_manager"]

[pages.tasks.shell]
title = "Shell Tasks"
module = "prefectlegacy.tasks.shell"
classes = ["ShellTask"]

[pages.tasks.strings]
title = "String Templating Tasks"
module = "prefectlegacy.tasks.templates"
classes = ["StringFormatter", "JinjaTemplate"]

[pages.tasks.twitter]
title = "Twitter Tasks"
module = "prefectlegacy.tasks.twitter"
classes = ["LoadTweetReplies"]

[pages.agent.agent]
title = "Agent"
module = "prefectlegacy.agent"
classes = {Agent = ["start"]}

[pages.agent.local]
title = "Local Agent"
module = "prefectlegacy.agent.local"
classes = {LocalAgent = ["start"]}

[pages.agent.docker]
title = "Docker Agent"
module = "prefectlegacy.agent.docker"
classes = {DockerAgent = ["start"]}

[pages.agent.kubernetes]
title = "Kubernetes Agent"
module = "prefectlegacy.agent.kubernetes"
classes = {KubernetesAgent = ["start"]}

[pages.agent.ecs]
title = "ECS Agent"
module = "prefectlegacy.agent.ecs"
classes = {ECSAgent = ["start"]}

[pages.agent.vertex]
title = "Vertex Agent"
module = "prefectlegacy.agent.vertex"
classes = {VertexAgent = ["start"]}

[pages.utilities.collections]
title = "Collections"
module = "prefectlegacy.utilities.collections"
classes = ["DotDict"]
functions = ["merge_dicts", "as_nested_dict", "dict_to_flatdict", "flatdict_to_dict"]

[pages.utilities.configuration]
title = "Configuration"
module = "prefectlegacy.utilities.configuration"
functions = ["set_temporary_config"]

[pages.utilities.context]
title = "Context"
module = "prefectlegacy.utilities.context"
classes = ["Context"]

[pages.utilities.debug]
title = "Debugging Tools"
module = "prefectlegacy.utilities.debug"
functions = ["is_serializable", "raise_on_exception"]

[pages.utilities.diagnostics]
title = "Diagnostics"
module = "prefectlegacy.utilities.diagnostics"
functions = ["diagnostic_info", "flow_information", "system_information", "config_overrides", "environment_variables"]

[pages.utilities.executors]
title = "Executors"
module = "prefectlegacy.utilities.executors"
functions = ["run_task_with_timeout"]

[pages.utilities.gcp]
title = "Google Utilities"
module = "prefectlegacy.utilities.gcp"
functions = ["get_storage_client", "get_bigquery_client"]

[pages.utilities.graphql]
title = "GraphQL"
module = "prefectlegacy.utilities.graphql"
classes = ["EnumValue"]
functions = ["parse_graphql", "parse_graphql_arguments", "with_args", "compress", "decompress"]

[pages.utilities.logging]
title = "Logging"
module = "prefectlegacy.utilities.logging"
functions = ["configure_logging", "get_logger"]

[pages.utilities.notifications]
title = "Notifications and Callback Tools"
module = "prefectlegacy.utilities.notifications"
functions = ["callback_factory", "slack_notifier", "gmail_notifier", "jira_notification.jira_notifier"]

[pages.utilities.serialization]
title = "Serialization"
module = "prefectlegacy.utilities.serialization"
classes = ["JSONCompatible", "Nested", "Bytes", "UUID", "FunctionReference"]
functions = ["to_qualified_name", "from_qualified_name"]

[pages.utilities.tasks]
title = "Task Utilities"
module = "prefectlegacy.utilities.tasks"
classes = []
functions = ["tags", "as_task", "pause_task", "task", "defaults_from_attrs", "apply_map"]

[pages.utilities.edges]
title = "Edge Utilities"
module = "prefectlegacy.utilities.edges"
classes = ["unmapped", "mapped", "flatten"]
functions = []

[pages.tasks.dremio]
title = "Dremio Tasks"
module = "prefectlegacy.tasks.dremio"
classes = ["DremioFetch"]

[pages.tasks.sendgrid]
title = "SendGrid Tasks"
module = "prefectlegacy.tasks.sendgrid"
classes = ["SendEmail"]

[pages.tasks.census]
title = "Census Tasks"
module = "prefectlegacy.tasks.census"
classes = ["CensusSyncTask"]
verified_task = true

[pages.tasks.airbyte]
title = "Airbyte Tasks"
module = "prefectlegacy.tasks.airbyte"
classes = ["AirbyteConnectionTask","AirbyteConfigurationExport"]
verified_task = true

[pages.tasks.cubejs]
title = "Cube.js Tasks"
module = "prefectlegacy.tasks.cubejs"
classes = ["CubeJSQueryTask"]

[pages.tasks.monte_carlo]
title = "Monte Carlo Tasks"
module = "prefectlegacy.tasks.monte_carlo"
classes = ["MonteCarloCreateOrUpdateLineage", "MonteCarloCreateOrUpdateNodeWithTags", "MonteCarloGetResources"]
verified_task = true

[pages.tasks.zendesk]
title = "Zendesk Tasks"
module = "prefectlegacy.tasks.zendesk"
classes = ["ZendeskTicketsIncrementalExportTask"]

[pages.tasks.Neo4j]
title = "Neo4j Tasks"
module = "prefectlegacy.tasks.neo4j"
classes = ["Neo4jRunCypherQueryTask"]

[pages.tasks.Transform]
title = "Transform Tasks"
module = "prefectlegacy.tasks.transform"
classes = ["TransformCreateMaterialization"]
verified_task = true

[pages.tasks.Hightouch]
title = "Hightouch Tasks"
module = "prefectlegacy.tasks.hightouch"
classes = ["HightouchRunSync"]

[pages.tasks.sftp]
title = "SFTP Tasks"
module = "prefectlegacy.tasks.sftp.sftp"
classes = ["SftpDownload", "SftpUpload"]

[pages.tasks.toloka]
title = "Toloka Tasks"
module = "prefectlegacy.tasks.toloka"
functions = ["create_project",
             "create_exam_pool",
             "create_pool",
             "create_tasks",
             "open_pool",
             "open_exam_pool",
             "wait_pool",
             "get_assignments",
             "get_assignments_df",
             "accept_assignment",
             "reject_assignment"]
